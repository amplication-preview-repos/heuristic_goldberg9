/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LlmConfiguration } from "./LlmConfiguration";
import { LlmConfigurationCountArgs } from "./LlmConfigurationCountArgs";
import { LlmConfigurationFindManyArgs } from "./LlmConfigurationFindManyArgs";
import { LlmConfigurationFindUniqueArgs } from "./LlmConfigurationFindUniqueArgs";
import { CreateLlmConfigurationArgs } from "./CreateLlmConfigurationArgs";
import { UpdateLlmConfigurationArgs } from "./UpdateLlmConfigurationArgs";
import { DeleteLlmConfigurationArgs } from "./DeleteLlmConfigurationArgs";
import { LlmConfigurationService } from "../llmConfiguration.service";
@graphql.Resolver(() => LlmConfiguration)
export class LlmConfigurationResolverBase {
  constructor(protected readonly service: LlmConfigurationService) {}

  async _llmConfigurationsMeta(
    @graphql.Args() args: LlmConfigurationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LlmConfiguration])
  async llmConfigurations(
    @graphql.Args() args: LlmConfigurationFindManyArgs
  ): Promise<LlmConfiguration[]> {
    return this.service.llmConfigurations(args);
  }

  @graphql.Query(() => LlmConfiguration, { nullable: true })
  async llmConfiguration(
    @graphql.Args() args: LlmConfigurationFindUniqueArgs
  ): Promise<LlmConfiguration | null> {
    const result = await this.service.llmConfiguration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LlmConfiguration)
  async createLlmConfiguration(
    @graphql.Args() args: CreateLlmConfigurationArgs
  ): Promise<LlmConfiguration> {
    return await this.service.createLlmConfiguration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LlmConfiguration)
  async updateLlmConfiguration(
    @graphql.Args() args: UpdateLlmConfigurationArgs
  ): Promise<LlmConfiguration | null> {
    try {
      return await this.service.updateLlmConfiguration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LlmConfiguration)
  async deleteLlmConfiguration(
    @graphql.Args() args: DeleteLlmConfigurationArgs
  ): Promise<LlmConfiguration | null> {
    try {
      return await this.service.deleteLlmConfiguration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LlmConfigurationService } from "../llmConfiguration.service";
import { LlmConfigurationCreateInput } from "./LlmConfigurationCreateInput";
import { LlmConfiguration } from "./LlmConfiguration";
import { LlmConfigurationFindManyArgs } from "./LlmConfigurationFindManyArgs";
import { LlmConfigurationWhereUniqueInput } from "./LlmConfigurationWhereUniqueInput";
import { LlmConfigurationUpdateInput } from "./LlmConfigurationUpdateInput";

export class LlmConfigurationControllerBase {
  constructor(protected readonly service: LlmConfigurationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LlmConfiguration })
  async createLlmConfiguration(
    @common.Body() data: LlmConfigurationCreateInput
  ): Promise<LlmConfiguration> {
    return await this.service.createLlmConfiguration({
      data: data,
      select: {
        createdAt: true,
        createdBy: true,
        id: true,
        name: true,
        settings: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LlmConfiguration] })
  @ApiNestedQuery(LlmConfigurationFindManyArgs)
  async llmConfigurations(
    @common.Req() request: Request
  ): Promise<LlmConfiguration[]> {
    const args = plainToClass(LlmConfigurationFindManyArgs, request.query);
    return this.service.llmConfigurations({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,
        id: true,
        name: true,
        settings: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LlmConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async llmConfiguration(
    @common.Param() params: LlmConfigurationWhereUniqueInput
  ): Promise<LlmConfiguration | null> {
    const result = await this.service.llmConfiguration({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,
        id: true,
        name: true,
        settings: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LlmConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLlmConfiguration(
    @common.Param() params: LlmConfigurationWhereUniqueInput,
    @common.Body() data: LlmConfigurationUpdateInput
  ): Promise<LlmConfiguration | null> {
    try {
      return await this.service.updateLlmConfiguration({
        where: params,
        data: data,
        select: {
          createdAt: true,
          createdBy: true,
          id: true,
          name: true,
          settings: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LlmConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLlmConfiguration(
    @common.Param() params: LlmConfigurationWhereUniqueInput
  ): Promise<LlmConfiguration | null> {
    try {
      return await this.service.deleteLlmConfiguration({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,
          id: true,
          name: true,
          settings: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

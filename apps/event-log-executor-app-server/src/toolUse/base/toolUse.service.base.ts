/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ToolUse as PrismaToolUse,
  Tool as PrismaTool,
} from "@prisma/client";

export class ToolUseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ToolUseCountArgs, "select">): Promise<number> {
    return this.prisma.toolUse.count(args);
  }

  async toolUses(args: Prisma.ToolUseFindManyArgs): Promise<PrismaToolUse[]> {
    return this.prisma.toolUse.findMany(args);
  }
  async toolUse(
    args: Prisma.ToolUseFindUniqueArgs
  ): Promise<PrismaToolUse | null> {
    return this.prisma.toolUse.findUnique(args);
  }
  async createToolUse(args: Prisma.ToolUseCreateArgs): Promise<PrismaToolUse> {
    return this.prisma.toolUse.create(args);
  }
  async updateToolUse(args: Prisma.ToolUseUpdateArgs): Promise<PrismaToolUse> {
    return this.prisma.toolUse.update(args);
  }
  async deleteToolUse(args: Prisma.ToolUseDeleteArgs): Promise<PrismaToolUse> {
    return this.prisma.toolUse.delete(args);
  }

  async getTool(parentId: string): Promise<PrismaTool | null> {
    return this.prisma.toolUse
      .findUnique({
        where: { id: parentId },
      })
      .tool();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ToolUseService } from "../toolUse.service";
import { ToolUseCreateInput } from "./ToolUseCreateInput";
import { ToolUse } from "./ToolUse";
import { ToolUseFindManyArgs } from "./ToolUseFindManyArgs";
import { ToolUseWhereUniqueInput } from "./ToolUseWhereUniqueInput";
import { ToolUseUpdateInput } from "./ToolUseUpdateInput";

export class ToolUseControllerBase {
  constructor(protected readonly service: ToolUseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ToolUse })
  async createToolUse(
    @common.Body() data: ToolUseCreateInput
  ): Promise<ToolUse> {
    return await this.service.createToolUse({
      data: {
        ...data,

        tool: data.tool
          ? {
              connect: data.tool,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        createdBy: true,
        id: true,
        parameters: true,

        tool: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ToolUse] })
  @ApiNestedQuery(ToolUseFindManyArgs)
  async toolUses(@common.Req() request: Request): Promise<ToolUse[]> {
    const args = plainToClass(ToolUseFindManyArgs, request.query);
    return this.service.toolUses({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,
        id: true,
        parameters: true,

        tool: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ToolUse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async toolUse(
    @common.Param() params: ToolUseWhereUniqueInput
  ): Promise<ToolUse | null> {
    const result = await this.service.toolUse({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,
        id: true,
        parameters: true,

        tool: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ToolUse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateToolUse(
    @common.Param() params: ToolUseWhereUniqueInput,
    @common.Body() data: ToolUseUpdateInput
  ): Promise<ToolUse | null> {
    try {
      return await this.service.updateToolUse({
        where: params,
        data: {
          ...data,

          tool: data.tool
            ? {
                connect: data.tool,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          createdBy: true,
          id: true,
          parameters: true,

          tool: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ToolUse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteToolUse(
    @common.Param() params: ToolUseWhereUniqueInput
  ): Promise<ToolUse | null> {
    try {
      return await this.service.deleteToolUse({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,
          id: true,
          parameters: true,

          tool: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

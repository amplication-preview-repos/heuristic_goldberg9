/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ToolUse } from "./ToolUse";
import { ToolUseCountArgs } from "./ToolUseCountArgs";
import { ToolUseFindManyArgs } from "./ToolUseFindManyArgs";
import { ToolUseFindUniqueArgs } from "./ToolUseFindUniqueArgs";
import { CreateToolUseArgs } from "./CreateToolUseArgs";
import { UpdateToolUseArgs } from "./UpdateToolUseArgs";
import { DeleteToolUseArgs } from "./DeleteToolUseArgs";
import { Tool } from "../../tool/base/Tool";
import { ToolUseService } from "../toolUse.service";
@graphql.Resolver(() => ToolUse)
export class ToolUseResolverBase {
  constructor(protected readonly service: ToolUseService) {}

  async _toolUsesMeta(
    @graphql.Args() args: ToolUseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ToolUse])
  async toolUses(
    @graphql.Args() args: ToolUseFindManyArgs
  ): Promise<ToolUse[]> {
    return this.service.toolUses(args);
  }

  @graphql.Query(() => ToolUse, { nullable: true })
  async toolUse(
    @graphql.Args() args: ToolUseFindUniqueArgs
  ): Promise<ToolUse | null> {
    const result = await this.service.toolUse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ToolUse)
  async createToolUse(
    @graphql.Args() args: CreateToolUseArgs
  ): Promise<ToolUse> {
    return await this.service.createToolUse({
      ...args,
      data: {
        ...args.data,

        tool: args.data.tool
          ? {
              connect: args.data.tool,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ToolUse)
  async updateToolUse(
    @graphql.Args() args: UpdateToolUseArgs
  ): Promise<ToolUse | null> {
    try {
      return await this.service.updateToolUse({
        ...args,
        data: {
          ...args.data,

          tool: args.data.tool
            ? {
                connect: args.data.tool,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ToolUse)
  async deleteToolUse(
    @graphql.Args() args: DeleteToolUseArgs
  ): Promise<ToolUse | null> {
    try {
      return await this.service.deleteToolUse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tool, {
    nullable: true,
    name: "tool",
  })
  async getTool(@graphql.Parent() parent: ToolUse): Promise<Tool | null> {
    const result = await this.service.getTool(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

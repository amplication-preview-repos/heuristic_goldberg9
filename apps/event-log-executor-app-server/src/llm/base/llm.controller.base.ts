/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LlmService } from "../llm.service";
import { LlmCreateInput } from "./LlmCreateInput";
import { Llm } from "./Llm";
import { LlmFindManyArgs } from "./LlmFindManyArgs";
import { LlmWhereUniqueInput } from "./LlmWhereUniqueInput";
import { LlmUpdateInput } from "./LlmUpdateInput";

export class LlmControllerBase {
  constructor(protected readonly service: LlmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Llm })
  async createLlm(@common.Body() data: LlmCreateInput): Promise<Llm> {
    return await this.service.createLlm({
      data: {
        ...data,

        tools: data.tools
          ? {
              connect: data.tools,
            }
          : undefined,
      },
      select: {
        configField: true,
        configuration: true,
        createdAt: true,
        createdBy: true,
        id: true,
        name: true,

        tools: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Llm] })
  @ApiNestedQuery(LlmFindManyArgs)
  async llms(@common.Req() request: Request): Promise<Llm[]> {
    const args = plainToClass(LlmFindManyArgs, request.query);
    return this.service.llms({
      ...args,
      select: {
        configField: true,
        configuration: true,
        createdAt: true,
        createdBy: true,
        id: true,
        name: true,

        tools: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Llm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async llm(@common.Param() params: LlmWhereUniqueInput): Promise<Llm | null> {
    const result = await this.service.llm({
      where: params,
      select: {
        configField: true,
        configuration: true,
        createdAt: true,
        createdBy: true,
        id: true,
        name: true,

        tools: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        version: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Llm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLlm(
    @common.Param() params: LlmWhereUniqueInput,
    @common.Body() data: LlmUpdateInput
  ): Promise<Llm | null> {
    try {
      return await this.service.updateLlm({
        where: params,
        data: {
          ...data,

          tools: data.tools
            ? {
                connect: data.tools,
              }
            : undefined,
        },
        select: {
          configField: true,
          configuration: true,
          createdAt: true,
          createdBy: true,
          id: true,
          name: true,

          tools: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Llm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLlm(
    @common.Param() params: LlmWhereUniqueInput
  ): Promise<Llm | null> {
    try {
      return await this.service.deleteLlm({
        where: params,
        select: {
          configField: true,
          configuration: true,
          createdAt: true,
          createdBy: true,
          id: true,
          name: true,

          tools: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

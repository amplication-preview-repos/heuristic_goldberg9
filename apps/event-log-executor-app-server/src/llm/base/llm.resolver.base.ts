/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Llm } from "./Llm";
import { LlmCountArgs } from "./LlmCountArgs";
import { LlmFindManyArgs } from "./LlmFindManyArgs";
import { LlmFindUniqueArgs } from "./LlmFindUniqueArgs";
import { CreateLlmArgs } from "./CreateLlmArgs";
import { UpdateLlmArgs } from "./UpdateLlmArgs";
import { DeleteLlmArgs } from "./DeleteLlmArgs";
import { Tool } from "../../tool/base/Tool";
import { LlmService } from "../llm.service";
@graphql.Resolver(() => Llm)
export class LlmResolverBase {
  constructor(protected readonly service: LlmService) {}

  async _llmsMeta(
    @graphql.Args() args: LlmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Llm])
  async llms(@graphql.Args() args: LlmFindManyArgs): Promise<Llm[]> {
    return this.service.llms(args);
  }

  @graphql.Query(() => Llm, { nullable: true })
  async llm(@graphql.Args() args: LlmFindUniqueArgs): Promise<Llm | null> {
    const result = await this.service.llm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Llm)
  async createLlm(@graphql.Args() args: CreateLlmArgs): Promise<Llm> {
    return await this.service.createLlm({
      ...args,
      data: {
        ...args.data,

        tools: args.data.tools
          ? {
              connect: args.data.tools,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Llm)
  async updateLlm(@graphql.Args() args: UpdateLlmArgs): Promise<Llm | null> {
    try {
      return await this.service.updateLlm({
        ...args,
        data: {
          ...args.data,

          tools: args.data.tools
            ? {
                connect: args.data.tools,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Llm)
  async deleteLlm(@graphql.Args() args: DeleteLlmArgs): Promise<Llm | null> {
    try {
      return await this.service.deleteLlm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tool, {
    nullable: true,
    name: "tools",
  })
  async getTools(@graphql.Parent() parent: Llm): Promise<Tool | null> {
    const result = await this.service.getTools(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

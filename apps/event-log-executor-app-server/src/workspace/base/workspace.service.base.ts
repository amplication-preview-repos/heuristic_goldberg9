/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Workspace as PrismaWorkspace } from "@prisma/client";

export class WorkspaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkspaceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workspace.count(args);
  }

  async workspaces(
    args: Prisma.WorkspaceFindManyArgs
  ): Promise<PrismaWorkspace[]> {
    return this.prisma.workspace.findMany(args);
  }
  async workspace(
    args: Prisma.WorkspaceFindUniqueArgs
  ): Promise<PrismaWorkspace | null> {
    return this.prisma.workspace.findUnique(args);
  }
  async createWorkspace(
    args: Prisma.WorkspaceCreateArgs
  ): Promise<PrismaWorkspace> {
    return this.prisma.workspace.create(args);
  }
  async updateWorkspace(
    args: Prisma.WorkspaceUpdateArgs
  ): Promise<PrismaWorkspace> {
    return this.prisma.workspace.update(args);
  }
  async deleteWorkspace(
    args: Prisma.WorkspaceDeleteArgs
  ): Promise<PrismaWorkspace> {
    return this.prisma.workspace.delete(args);
  }
}
